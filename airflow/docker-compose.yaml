version: "3.8"

x-airflow-common: &airflow-common
  image: apache/airflow:2.8.1-python3.11
  env_file:
    - .env
  environment: &airflow-common-env
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__CORE__DAGS_FOLDER: /opt/recommend/airflow/dags
    AIRFLOW__CORE__BASE_LOG_FOLDER: /opt/airflow/logs
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-}
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY:-}
    AIRFLOW_PIP_ADDITIONAL_REQUIREMENTS: ${AIRFLOW_PIP_ADDITIONAL_REQUIREMENTS:-}
    RECOMMEND_PROJECT_DIR: /opt/recommend
    RECOMMEND_PYTHON_BIN: python
    PYTHONPATH: /opt/recommend
  volumes:
    - ../:/opt/recommend
    - airflow-logs:/opt/airflow/logs
    - airflow-config:/opt/airflow/config
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        airflow db migrate
        airflow users create \
          --username ${AIRFLOW_USERNAME:-admin} \
          --password ${AIRFLOW_PASSWORD:-admin} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com || true
    environment:
      <<: *airflow-common-env
      AIRFLOW_UID: "0"
    volumes:
      - ../:/opt/recommend

  airflow-cli:
    <<: *airflow-common
    command: bash
    environment:
      <<: *airflow-common-env
    tty: true
    stdin_open: true

volumes:
  postgres-data:
  airflow-logs:
  airflow-config:
