version: "3.9"

x-env-file: &default-env
  env_file:
    - .env

services:
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - recommend-net

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.16.0
    container_name: mlflow
    <<: *default-env
    environment:
      MLFLOW_BACKEND_STORE_URI: sqlite:///mlflow/mlflow.db
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /mlflow/artifacts
    volumes:
      - mlflow-data:/mlflow
    command: mlflow server --host 0.0.0.0 --port 5000 --serve-artifacts --artifacts-destination /mlflow/artifacts
    ports:
      - "5000:5000"
    networks:
      - recommend-net

  recommendation-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recommendation-api
    <<: *default-env
    environment:
      REDIS_URL: redis://redis:6379/0
      FEATURE_REDIS_URL: redis://redis:6379/1
      MLFLOW_TRACKING_URI: http://mlflow:5000
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      redis:
        condition: service_healthy
      mlflow:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - recommend-net

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: recommend-airflow:latest
    container_name: airflow-init
    restart: "no"
    entrypoint: /bin/bash
    command: >
      -c "airflow db init &&
          airflow users create --role Admin --username ${AIRFLOW_USERNAME:-admin} --password ${AIRFLOW_PASSWORD:-admin} --firstname Admin --lastname User --email admin@example.com"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      PYTHONPATH: /opt/recommend
      MLFLOW_TRACKING_URI: http://mlflow:5000
    depends_on:
      postgres-airflow:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - .:/opt/recommend
      - mlflow-data:/mlflow
    networks:
      - recommend-net

  postgres-airflow:
    image: postgres:15
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-airflow-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recommend-net

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: recommend-airflow:latest
    container_name: airflow-webserver
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    <<: *default-env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      REDIS_URL: redis://redis:6379/0
      FEATURE_REDIS_URL: redis://redis:6379/1
      PYTHONPATH: /opt/recommend
      MLFLOW_TRACKING_URI: http://mlflow:5000
    volumes:
      - .:/opt/recommend
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - mlflow-data:/mlflow
    ports:
      - "8080:8080"
    command: webserver
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - recommend-net

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: recommend-airflow:latest
    container_name: airflow-scheduler
    restart: unless-stopped
    depends_on:
      airflow-webserver:
        condition: service_started
    <<: *default-env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      REDIS_URL: redis://redis:6379/0
      FEATURE_REDIS_URL: redis://redis:6379/1
      PYTHONPATH: /opt/recommend
      MLFLOW_TRACKING_URI: http://mlflow:5000
    volumes:
      - mlflow-data:/mlflow
      - .:/opt/recommend
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: scheduler
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - recommend-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    networks:
      - recommend-net

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - "9093:9093"
    networks:
      - recommend-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - alertmanager
    networks:
      - recommend-net

networks:
  recommend-net:
    driver: bridge

volumes:
  postgres-airflow-data:
  redis-data:
  mlflow-data:
  prometheus-data:
  grafana-data:
